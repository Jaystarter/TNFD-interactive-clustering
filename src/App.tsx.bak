import { useState, useEffect, useMemo, useCallback } from 'react';
import './App.css';
import { Button } from './components/ui/button';
import { Card, CardContent, CardFooter } from './components/ui/card';
import { ForceGraphContainer } from './components/ForceGraphContainer';
import { Tool, tools as defaultTools } from './data/tools';
import { FeatureWeights } from './utils/clusteringUtils';
import Papa from 'papaparse';

// Utility function to load CSV from different possible locations
const loadCSVFromPossibleLocations = async (): Promise<string> => {
  const possiblePaths = [
    '/TNFD Tools Prototype Data.csv',
    '/TNFD_Tools_Prototype_Data.csv',
    './TNFD Tools Prototype Data.csv',
    '../TNFD Tools Prototype Data.csv'
  ];

  for (const path of possiblePaths) {
    try {
      const response = await fetch(path);
      if (response.ok) {
        const content = await response.text();
        console.log(`Successfully loaded CSV from ${path}`);
        return content;
      }
    } catch (err) {
      console.warn(`Failed to load from ${path}`);
    }
  }

  throw new Error('Could not load CSV file from any location');
};

import {
  ThemeProvider,
  createTheme,
  Typography,
  InputAdornment,
  TextField,
  IconButton,
  Divider,
  Tooltip,
  Chip,
  Collapse,
  Modal,
  Fade,
  Backdrop,
  List,
  ListItemText,
  ListItemButton,
  CircularProgress
} from '@mui/material';
import { Search, X, ChevronDown as ExpandMoreIcon, ChevronUp as ExpandLessIcon, Settings as TuneIcon, FolderKanban as CategoryIcon, BookOpen as SourceIcon, Info } from 'lucide-react';

// Import color palette
import { colorPalette } from './data/tools';

// Create a custom theme
const theme = createTheme({
  palette: {
    primary: {
      main: colorPalette.darkGreen, // Dark green from palette
    },
    secondary: {
      main: colorPalette.mediumGreen, // Medium green from palette
    },
    background: {
      default: colorPalette.paleBlue, // Pale blue from palette
    },
  },
  typography: {
    fontFamily: "'Inter', 'Roboto', 'Helvetica', 'Arial', sans-serif",
    h5: {
      fontWeight: 600,
    },
    h6: {
      fontWeight: 600,
    },
  },
  shape: {
    borderRadius: 8,
  },
  components: {
    MuiPaper: {
      styleOverrides: {
        root: {
          boxShadow: '0 2px 10px rgba(0, 0, 0, 0.05)',
        },
      },
    },
    MuiSlider: {
      styleOverrides: {
        root: {
          padding: '15px 0',
        },
        thumb: {
          height: 20,
          width: 20,
          backgroundColor: '#fff',
          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',
          '&:focus, &:hover, &.Mui-active': {
            boxShadow: '0 3px 8px rgba(0, 0, 0, 0.3)',
          },
        },
        valueLabel: {
          backgroundColor: '#2e7d32',
        },
      },
    },
  },
});

// Web Worker runner for heavy processing
const runProcessInWorker = (
  csvContent: string,
  similarityThreshold: number,
  featureWeights: FeatureWeights
): Promise<Tool[]> => {
  return new Promise((resolve, reject) => {
    const worker = new Worker(
      new URL('./workers/processWorker.ts', import.meta.url),
      { type: 'module' }
    );
    worker.onmessage = (e: MessageEvent) => {
      if (e.data.error) reject(e.data.error);
      else resolve(e.data.tools);
      worker.terminate();
    };
    worker.onerror = (e) => {
      reject(e.message);
      worker.terminate();
    };
    worker.postMessage({ csvContent, similarityThreshold, featureWeights });
  });
};

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [tools, setTools] = useState<Tool[]>(defaultTools);
  const [isLoading, setIsLoading] = useState(false);
  const [similarityThreshold, setSimilarityThreshold] = useState(0.6);
  const [csvLoaded, setCsvLoaded] = useState(false);
  const [rawCsvData, setRawCsvData] = useState<string | null>(null);
  const [controlsExpanded, setControlsExpanded] = useState(false);
  const [isNaturalLanguageSearch, setIsNaturalLanguageSearch] = useState(false);
  const [naturalLanguageResults, setNaturalLanguageResults] = useState<Tool[]>([]);
  const [searchFocused, setSearchFocused] = useState(false);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [selectedTool, setSelectedTool] = useState<Tool | null>(null);

  // Static high-level buckets for category filter
  const availableCategories = [
    'Sensors',
    'Supply Chain',
    'Analysis',
    'Visualization',
    'Open Data'
  ];
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);

  // Additional filter criteria
  const [availableFunctions, setAvailableFunctions] = useState<string[]>([]);
  const [selectedFunctions, setSelectedFunctions] = useState<string[]>([]);

  const [availableEnvironments, setAvailableEnvironments] = useState<string[]>([]);
  const [selectedEnvironments, setSelectedEnvironments] = useState<string[]>([]);

  const [availableDataSources, setAvailableDataSources] = useState<string[]>([]);
  const [selectedDataSources, setSelectedDataSources] = useState<string[]>([]);

  const [availableUsers, setAvailableUsers] = useState<string[]>([]);
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);

  // Panel states
  const [filtersExpanded, setFiltersExpanded] = useState(false);
  const [filterPanelVisible, setFilterPanelVisible] = useState(false);

  // Feature weights
  const [primaryFunctionWeight, setPrimaryFunctionWeight] = useState(0.3);
  const [dataSourcesWeight, setDataSourcesWeight] = useState(0.25);
  const [targetUserWeight, setTargetUserWeight] = useState(0.25);
  const [environmentTypeWeight, setEnvironmentTypeWeight] = useState(0.2);

  // Combine weights into an object
  const featureWeights = useMemo<FeatureWeights>(() => ({
    'Primary Function': primaryFunctionWeight,
    'Data Sources': dataSourcesWeight,
    'Target User/Client': targetUserWeight,
    'Environment Type': environmentTypeWeight
  }), [primaryFunctionWeight, dataSourcesWeight, targetUserWeight, environmentTypeWeight]);

  // Load CSV data only once on initial render
  useEffect(() => {
    const initialDataLoad = async () => {
      try {
        setIsLoading(true);

        // Attempt to load CSV (or use uploaded version)
        const savedCsv = localStorage.getItem('uploadedToolsCsv');
        const csvContent = savedCsv !== null
          ? savedCsv
          : await loadCSVFromPossibleLocations();
        setCsvLoaded(true);
        // Store the raw CSV data for later reuse
        setRawCsvData(csvContent);

        // Memoization: localStorage cache
        const cacheKey = 'toolsProcessingCache';
        let processedTools: Tool[] | undefined;
        const cacheRaw = localStorage.getItem(cacheKey);
        if (cacheRaw) {
          try {
            const cache = JSON.parse(cacheRaw);
            if (
              cache.csvContent === csvContent &&
              cache.similarityThreshold === similarityThreshold &&
              JSON.stringify(cache.featureWeights) === JSON.stringify(featureWeights)
            ) {
              processedTools = cache.tools;
            }
          } catch {}
        }
        if (!processedTools) {
          processedTools = await runProcessInWorker(
            csvContent,
            similarityThreshold,
            featureWeights
          );
          localStorage.setItem(
            cacheKey,
            JSON.stringify({ csvContent, similarityThreshold, featureWeights, tools: processedTools })
          );
        }

        // If we have no processed tools, fall back to default
        if (!processedTools || processedTools.length === 0) {
          console.warn('No tools were processed from CSV, using default tools');
          setTools(defaultTools);
        } else {
          setTools(processedTools);
          setSelectedCategories([]); // Reset selected categories

          // Extract other filter options from the raw CSV data
          if (rawCsvData) {
            try {
              const parsedData = Papa.parse(rawCsvData, { header: true }).data as any[];

              // Extract unique values for each filter type
              const functions = Array.from(new Set(parsedData
                .map(row => row['Primary Function'])
                .filter(Boolean)
                .flatMap(val => val.split(';').map((v: string) => v.trim()))
              ));

              const environments = Array.from(new Set(parsedData
                .map(row => row['Environment Type'])
                .filter(Boolean)
                .flatMap(val => val.split(';').map((v: string) => v.trim()))
              ));

              const dataSources = Array.from(new Set(parsedData
                .map(row => row['Data Sources'])
                .filter(Boolean)
                .flatMap(val => val.split(';').map((v: string) => v.trim()))
              ));

              const users = Array.from(new Set(parsedData
                .map(row => row['Target User/Client'])
                .filter(Boolean)
                .flatMap(val => val.split(';').map((v: string) => v.trim()))
              ));

              // Set the available filter options
              setAvailableFunctions(functions);
              setAvailableEnvironments(environments);
              setAvailableDataSources(dataSources);
              setAvailableUsers(users);

              // Reset selected filters
              setSelectedFunctions([]);
              setSelectedEnvironments([]);
              setSelectedDataSources([]);
              setSelectedUsers([]);
            } catch (error) {
              console.error('Error parsing filter options:', error);
            }
          }
        }
      } catch (error) {
        console.error('Error loading CSV data:', error);
        // Fall back to default tools if there's an error
        setTools(defaultTools);
      } finally {
        setIsLoading(false);
      }
    };

    initialDataLoad();
  }, []); // Empty dependency array means this only runs once on mount

  // Handle changes in weights or threshold using stored CSV data
  const handleWeightsChange = useCallback(async () => {
    try {
      setIsLoading(true);

      if (!csvLoaded || !rawCsvData) return;

      // Memoization: localStorage cache
      const cacheKey = 'toolsProcessingCache';
      let updatedTools: Tool[] | undefined;
      const cacheRaw = localStorage.getItem(cacheKey);
      if (cacheRaw) {
        try {
          const cache = JSON.parse(cacheRaw);
          if (
            cache.csvContent === rawCsvData &&
            cache.similarityThreshold === similarityThreshold &&
            JSON.stringify(cache.featureWeights) === JSON.stringify(featureWeights)
          ) {
            updatedTools = cache.tools;
          }
        } catch {}
      }
      if (!updatedTools) {
        updatedTools = await runProcessInWorker(
          rawCsvData,
          similarityThreshold,
          featureWeights
        );
        localStorage.setItem(
          cacheKey,
          JSON.stringify({ csvContent: rawCsvData, similarityThreshold, featureWeights, tools: updatedTools })
        );
      }
      setTools(updatedTools!);
    } catch (error) {
      console.error('Error updating weights:', error);
    } finally {
      setIsLoading(false);
    }
  }, [csvLoaded, rawCsvData, similarityThreshold, featureWeights]);

  // Run weight updates when feature weights change
  useEffect(() => {
    if (csvLoaded && rawCsvData) {
      // Fixed similarity threshold at 0.6
      setSimilarityThreshold(0.6); 
      handleWeightsChange();
    }
  }, [csvLoaded, rawCsvData, featureWeights, handleWeightsChange]);

  // Similarity threshold is now fixed at 0.6

  // Handle feature weight changes
  const handleFeatureWeightChange = useCallback((feature: string, newValue: number | number[]) => {
    const value = newValue as number;
    switch (feature) {
      case 'Primary Function':
        setPrimaryFunctionWeight(value);
        break;
      case 'Data Sources':
        setDataSourcesWeight(value);
        break;
      case 'Target User/Client':
        setTargetUserWeight(value);
        break;
      case 'Environment Type':
        setEnvironmentTypeWeight(value);
        break;
    }
  }, []);

  // Generic filter toggle handler
  const handleFilterToggle = (
    value: string,
    _selectedValues: string[], // Prefix with underscore to indicate it's not used
    setSelectedValues: React.Dispatch<React.SetStateAction<string[]>>
  ) => {
    setSelectedValues(prev => {
      if (prev.includes(value)) {
        return prev.filter(v => v !== value);
      } else {
        return [...prev, value];
      }
    });
  };

  // Specific handlers for each filter type
  const handleCategoryToggle = (category: string) => {
    handleFilterToggle(category, selectedCategories, setSelectedCategories);
  };

  const handleFunctionToggle = (func: string) => {
    handleFilterToggle(func, selectedFunctions, setSelectedFunctions);
  };

  const handleEnvironmentToggle = (env: string) => {
    handleFilterToggle(env, selectedEnvironments, setSelectedEnvironments);
  };

  const handleDataSourceToggle = (source: string) => {
    handleFilterToggle(source, selectedDataSources, setSelectedDataSources);
  };

  const handleUserToggle = (user: string) => {
    handleFilterToggle(user, selectedUsers, setSelectedUsers);
  };

  // Clear all filters
  const clearAllFilters = () => {
    setSelectedCategories([]);
    setSelectedFunctions([]);
    setSelectedEnvironments([]);
    setSelectedDataSources([]);
    setSelectedUsers([]);
    setSearchTerm('');
    setIsNaturalLanguageSearch(false);
    setNaturalLanguageResults([]);
  };

  // Handle CSV file upload to replace the dataset
  const handleCsvUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    setIsLoading(true);
    try {
      const text = await file.text();
      localStorage.setItem('uploadedToolsCsv', text);
      setRawCsvData(text);
      setCsvLoaded(true);
      const processed = await runProcessInWorker(text, similarityThreshold, featureWeights);
      setTools(processed);
      // Parse CSV for filter options
      const parsedData = Papa.parse(text, { header: true }).data as any[];
      const funcs = Array.from(new Set(parsedData
        .map(row => row['Primary Function'])
        .filter(Boolean)
        .flatMap((val: string) => val.split(';').map(v => v.trim()))));
      const envs = Array.from(new Set(parsedData
        .map(row => row['Environment Type'])
        .filter(Boolean)
        .flatMap((val: string) => val.split(';').map(v => v.trim()))));
      const srcs = Array.from(new Set(parsedData
        .map(row => row['Data Sources'])
        .filter(Boolean)
        .flatMap((val: string) => val.split(';').map(v => v.trim()))));
      const usrs = Array.from(new Set(parsedData
        .map(row => row['Target User/Client'])
        .filter(Boolean)
        .flatMap((val: string) => val.split(';').map(v => v.trim()))));
      setAvailableFunctions(funcs);
      setAvailableEnvironments(envs);
      setAvailableDataSources(srcs);
      setAvailableUsers(usrs);
      clearAllFilters();
    } catch (err) {
      console.error('Error uploading CSV', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Reset to default CSV (clears upload)
  const handleResetCsv = () => {
    localStorage.removeItem('uploadedToolsCsv');
    window.location.reload();
  };

  // Handle search focus events
  const handleSearchFocus = () => {
    setSearchFocused(true);
  };

  // Handle key down events for search
  const handleSearchKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      if (searchTerm.trim()) {
        handleNaturalLanguageSearch(searchTerm);
        setSearchFocused(false); // hide overlay when showing results
        setShowSearchResults(true);
      }
    } else if (e.key === 'Escape') {
      setSearchFocused(false);
      setShowSearchResults(false);
    }
  };

  // Handle selecting a tool from search results
  const handleToolSelect = (tool: Tool) => {
    setSelectedTool(tool);
    setShowSearchResults(false);
    setSearchFocused(false);
  };

  // Close tool details and return to search
  const handleCloseToolDetails = () => {
    setSelectedTool(null);
  };

  // Handle natural language search
  const handleNaturalLanguageSearch = async (query: string) => {
    if (!query.trim()) return;
    
    setIsLoading(true);
    setIsNaturalLanguageSearch(true);
    setShowSearchResults(true);
    
    try {
      const response = await fetch('http://localhost:3001/api/natural-language-search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query,
          tools
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to process natural language search');
      }
      
      setNaturalLanguageResults(data.relevantTools);
    } catch (error) {
      console.error('Error with natural language search:', error);
      setIsNaturalLanguageSearch(false);
      // Fall back to keyword search if API call fails
    } finally {
      setIsLoading(false);
    }
  };
  
  // Filter tools based on all criteria
  const filteredTools = useMemo(() => {
    // Start with all tools
    let filtered = tools;
    
    // If we have natural language search results, prioritize those
    if (isNaturalLanguageSearch && naturalLanguageResults.length > 0 && searchTerm.trim()) {
      // We still need to apply other filters to the natural language results
      filtered = naturalLanguageResults;
    }
    // Otherwise apply standard keyword search filter
    else if (searchTerm.trim()) {
      const lowerSearchTerm = searchTerm.toLowerCase();
      filtered = filtered.filter(tool =>
        tool.name.toLowerCase().includes(lowerSearchTerm) ||
        tool.category.toLowerCase().includes(lowerSearchTerm) ||
        (tool.primaryFunction && tool.primaryFunction.toLowerCase().includes(lowerSearchTerm)) ||
        (tool.dataSources && tool.dataSources.toLowerCase().includes(lowerSearchTerm)) ||
        (tool.targetUser && tool.targetUser.toLowerCase().includes(lowerSearchTerm)) ||
        (tool.environmentType && tool.environmentType.toLowerCase().includes(lowerSearchTerm))
      );
    }

    // Get the raw CSV data for more detailed filtering
    if (rawCsvData) {
      try {
        const parsedData = Papa.parse(rawCsvData, { header: true }).data as any[];
        const toolMap = new Map(parsedData.map(row => [
          row['Tool Name']?.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, ''),
          row
        ]));

        // Apply high-level category filter on CSV Primary Function
        if (selectedCategories.length > 0 && selectedCategories.length < availableCategories.length) {
          // Only apply filtering if some but not all categories are selected
          const normalizedCats = selectedCategories.map(c => c.toLowerCase());
          filtered = filtered.filter(tool => {
            const csvTool = toolMap.get(tool.id);
            if (!csvTool) return false;

            // Get all relevant fields for categorization
            const primaryFunction = (csvTool['Primary Function'] || '').toLowerCase();
            const dataSources = (csvTool['Data Sources'] || '').toLowerCase();
            const description = (csvTool['Description'] || '').toLowerCase();
            const toolName = (csvTool['Tool Name'] || '').toLowerCase();
            const targetUser = (csvTool['Target User/Client'] || '').toLowerCase();
            const environmentType = (csvTool['Environment Type'] || '').toLowerCase();

            // Combine all text for more comprehensive matching
            const allText = `${primaryFunction} ${dataSources} ${description} ${toolName} ${targetUser} ${environmentType}`;

            // Check if the tool belongs to any of the selected categories
            let matchesCategory = false;

            if (normalizedCats.includes('sensors')) {
              matchesCategory = matchesCategory ||
                // Standard sensors and hardware
                allText.includes('sensor') ||
                allText.includes('camera') ||
                allText.includes('drone') ||
                allText.includes('satellite') ||
                allText.includes('hardware') ||
                allText.includes('field device') ||
                allText.includes('edna') ||
                allText.includes('monitoring') ||
                allText.includes('acoustic') ||
                // Data sources from sensors
                dataSources.includes('satellite imagery') ||
                dataSources.includes('wildlife cameras') ||
                dataSources.includes('acoustic sensors') ||
                primaryFunction.includes('monitoring') ||
                // Experimental hardware and citizen science (from Emerging Tech)
                allText.includes('prototype') && allText.includes('hardware') ||
                allText.includes('citizen science') && allText.includes('data collection') ||
                allText.includes('vr') && allText.includes('field') ||
                allText.includes('ar') && allText.includes('field');
            }

            if (normalizedCats.includes('data pipelines')) {
              // Focus on data connection, transformation, and integration
              matchesCategory = matchesCategory ||
                (primaryFunction.includes('data') && !primaryFunction.includes('data provision')) ||
                allText.includes('integration') ||
                allText.includes('pipeline') ||
                allText.includes('etl') ||
                allText.includes('excel') ||
                allText.includes('api') ||
                allText.includes('collection') ||
                allText.includes('accounting') ||
                primaryFunction.includes('footprinting') ||
                // Include private/internal databases but not public repositories
                (allText.includes('database') && !allText.includes('open') && !toolName.includes('gbif')) ||
                (allText.includes('repository') && !allText.includes('open access'));
            }

            if (normalizedCats.includes('analysis')) {
              matchesCategory = matchesCategory ||
                // Core analysis functions
                primaryFunction.includes('analysis') ||
                primaryFunction.includes('assessment') ||
                primaryFunction.includes('modeling') ||
                allText.includes('analytics') ||
                allText.includes('recognition') ||
                allText.includes('model') ||
                allText.includes('statistical') ||
                // AI and machine learning (previously in Emerging Tech)
                allText.includes('machine learning') ||
                allText.includes('ml') ||
                allText.includes('ai') ||
                allText.includes('artificial intelligence') ||
                toolName.includes('ai') ||
                // Assessment types
                primaryFunction.includes('risk assessment') ||
                primaryFunction.includes('impact assessment') ||
                primaryFunction.includes('status assessment') ||
                primaryFunction.includes('footprinting') ||
                // Advanced planning (previously in Emerging Tech)
                primaryFunction.includes('scenario planning') ||
                primaryFunction.includes('prioritization');
            }

            if (normalizedCats.includes('visualization')) {
              // Focus on visual presentation of data and reporting frameworks
              matchesCategory = matchesCategory ||
                // Visual elements
                allText.includes('visualization') ||
                allText.includes('dashboard') ||
                allText.includes('chart') ||
                allText.includes('map') ||
                allText.includes('display') ||
                // Reporting frameworks and outputs
                primaryFunction.includes('reporting') ||
                primaryFunction.includes('reporting framework') ||
                (primaryFunction.includes('framework') && allText.includes('report')) ||
                // Benchmarking and comparative tools
                primaryFunction.includes('benchmarking') ||
                primaryFunction.includes('rating') ||
                primaryFunction.includes('valuation') ||
                // KPIs and metrics
                allText.includes('kpi') ||
                (allText.includes('report') &&
                  (allText.includes('generator') ||
                   allText.includes('template') ||
                   allText.includes('dashboard')));
            }

            if (normalizedCats.includes('open data')) {
              // Focus specifically on open, public data repositories and research data
              matchesCategory = matchesCategory ||
                allText.includes('open data') ||
                allText.includes('gbif') ||
                allText.includes('obis') ||
                (allText.includes('research') && (allText.includes('data') || allText.includes('database'))) ||
                dataSources.includes('open') ||
                description.includes('open access') ||
                toolName.includes('gbif') ||
                toolName.includes('data platform') ||
                toolName.includes('data repository') ||
                primaryFunction.includes('data provision') ||
                primaryFunction.includes('knowledge database') ||
                primaryFunction.includes('knowledge sharing') ||
                // Specifically target public/open databases and repositories
                (allText.includes('database') && (allText.includes('open') || description.includes('public'))) ||
                (allText.includes('repository') && (allText.includes('open access') || description.includes('public')));
            }

            // Note: We've removed the 'Emerging Tech' category
            // Tools that would have been in that category are now distributed to other categories
            // through their existing matching logic

            return matchesCategory;
          });
        }

        // Apply primary function filter
        if (selectedFunctions.length > 0) {
          filtered = filtered.filter(tool => {
            const csvTool = toolMap.get(tool.id);
            if (!csvTool) return false;

            const functions = csvTool['Primary Function']?.split(';').map((f: string) => f.trim()) || [];
            return selectedFunctions.some(f => functions.includes(f));
          });
        }

        // Apply environment type filter
        if (selectedEnvironments.length > 0) {
          filtered = filtered.filter(tool => {
            const csvTool = toolMap.get(tool.id);
            if (!csvTool) return false;

            const environments = csvTool['Environment Type']?.split(';').map((e: string) => e.trim()) || [];
            return selectedEnvironments.some(e => environments.includes(e));
          });
        }

        // Apply data sources filter
        if (selectedDataSources.length > 0) {
          filtered = filtered.filter(tool => {
            const csvTool = toolMap.get(tool.id);
            if (!csvTool) return false;

            const sources = csvTool['Data Sources']?.split(';').map((s: string) => s.trim()) || [];
            return selectedDataSources.some(s => sources.includes(s));
          });
        }

        // Apply target user filter
        if (selectedUsers.length > 0) {
          filtered = filtered.filter(tool => {
            const csvTool = toolMap.get(tool.id);
            if (!csvTool) return false;

            const users = csvTool['Target User/Client']?.split(';').map((u: string) => u.trim()) || [];
            return selectedUsers.some(u => users.includes(u));
          });
        }
      } catch (error) {
        console.error('Error applying detailed filters:', error);
      }
    }

    return filtered;
  }, [tools, searchTerm, selectedCategories, selectedFunctions, selectedEnvironments,
    selectedDataSources, selectedUsers, rawCsvData, isNaturalLanguageSearch, naturalLanguageResults]);

  return (
    <ThemeProvider theme={theme}>
      {/* ... */}
    </ThemeProvider>
  );
}

export default App;
