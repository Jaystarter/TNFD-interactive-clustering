# Task ID: 13
# Title: Migrate TNFD Tools Relational Map from Material UI to SHADCN Components
# Status: pending
# Dependencies: None
# Priority: high
# Description: Replace all Material UI (MUI) components in the TNFD Tools Relational Map application with SHADCN components, using Lucide for icons and Tailwind for styling, while maintaining visual consistency and accessibility.
# Details:
This task involves a complete migration from Material UI to SHADCN UI components:

1. **Setup and Configuration**:
   - Remove all MUI dependencies from package.json
   - Install and configure SHADCN UI following Context7 documentation
   - Install Lucide for icons
   - Configure Tailwind CSS for layout and styling

2. **Component Migration Plan** (implement in this order):
   - **Typography**: Replace MUI Typography with SHADCN equivalents (h1-h4, p, blockquote)
   - **Icons**: Replace all MUI icons with Lucide equivalents
   - **Basic Components**: Migrate Button, Card, Avatar components
   - **Form Components**: Replace TextField, Select, Checkbox, Radio, Switch components
   - **Navigation**: Update Tabs, Breadcrumbs, Pagination components
   - **Feedback**: Migrate Progress, Alert, Toast components
   - **Overlay**: Replace Dialog, Drawer, Tooltip components
   - **Data Display**: Update Accordion/Collapse, Table components
   - **Layout**: Replace Grid, Box, Container with Tailwind flex/grid utilities

3. **For each component type**:
   - Reference the SHADCN documentation for proper implementation
   - Ensure theme consistency with the current design
   - Maintain all accessibility features (ARIA attributes, keyboard navigation)
   - Update component props to match SHADCN API

4. **Theme Migration**:
   - Create equivalent theme tokens in Tailwind configuration
   - Ensure consistent color palette, spacing, and typography

5. **Documentation**:
   - Document any component usage pattern changes for the team
   - Create a migration reference guide for future components

Refer to Context7 documentation for SHADCN and Lucide usage patterns and migration best practices throughout the implementation.

# Test Strategy:
Testing should verify both functionality and visual consistency:

1. **Visual Regression Testing**:
   - Capture screenshots of key UI states before migration
   - Compare with post-migration screenshots to ensure visual parity
   - Test across multiple viewport sizes (mobile, tablet, desktop)

2. **Component Testing**:
   - Update existing component tests to work with SHADCN components
   - Verify each component maintains the same functionality
   - Test all interactive behaviors (clicks, hovers, focus states)

3. **Accessibility Testing**:
   - Run automated accessibility tests (Axe, Lighthouse)
   - Verify screen reader compatibility
   - Test keyboard navigation flows
   - Ensure proper focus management in interactive components

4. **Integration Testing**:
   - Verify components work correctly together in complex UI sections
   - Test data flow between components
   - Ensure event handlers are properly connected

5. **Performance Testing**:
   - Compare bundle size before and after migration
   - Measure render times for complex component trees
   - Test application load time

6. **Browser Compatibility**:
   - Test in Chrome, Firefox, Safari, and Edge
   - Verify mobile browser compatibility

Document all test results with before/after comparisons to demonstrate successful migration.

# Subtasks:
## 1. Set up SHADCN UI, Tailwind CSS, and Lucide icons infrastructure [pending]
### Dependencies: None
### Description: Remove Material UI dependencies and set up the foundational infrastructure for SHADCN UI components, Tailwind CSS styling, and Lucide icons in the TNFD Tools Relational Map application.
### Details:
1. Remove all MUI dependencies from package.json (mui/material, mui/icons-material, emotion/react, emotion/styled)
2. Install Tailwind CSS and configure it according to Context7 documentation:
   - Run `npm install -D tailwindcss postcss autoprefixer`
   - Initialize with `npx tailwindcss init -p`
   - Configure content paths in tailwind.config.js
   - Add Tailwind directives to global CSS
3. Install SHADCN UI CLI: `npm install -D @shadcn/ui`
4. Initialize SHADCN UI with `npx shadcn-ui init` and select appropriate options (React, Next.js, App/Pages Router, etc.)
5. Install Lucide icons: `npm install lucide-react`
6. Set up theme configuration in tailwind.config.js to match current design system:
   - Define color palette variables to match current theme
   - Configure typography scales
   - Set up spacing and breakpoints
7. Create a components/ui directory for SHADCN components
8. Set up utility functions for class merging (cn utility using clsx/twMerge)
9. Test the setup by adding a simple SHADCN component and verifying it renders correctly
10. Document the new project structure and configuration for the team

## 2. Migrate basic UI components: Typography, Button, Card, and Icons [pending]
### Dependencies: 13.1
### Description: Replace MUI Typography, Button, Card components, and icons with their SHADCN and Lucide equivalents, establishing the foundation for the UI migration.
### Details:
1. Typography Migration:
   - Add SHADCN Typography components using `npx shadcn-ui add typography`
   - Create consistent text styles for h1-h6, paragraphs, and other text elements
   - Replace all MUI Typography components with appropriate HTML elements + Tailwind classes
   - Example: `<Typography variant="h1">` → `<h1 className="text-4xl font-bold">`

2. Button Migration:
   - Add SHADCN Button component: `npx shadcn-ui add button`
   - Map MUI Button variants to SHADCN variants (contained, outlined, text)
   - Replace all MUI Button instances with SHADCN Button
   - Ensure proper handling of startIcon/endIcon props using Lucide icons
   - Example: `<Button startIcon={<DeleteIcon />}>` → `<Button><Trash2 className="mr-2 h-4 w-4" />Delete</Button>`

3. Card Migration:
   - Add SHADCN Card components: `npx shadcn-ui add card`
   - Replace MUI Card, CardContent, CardHeader, CardActions with SHADCN equivalents
   - Ensure proper spacing and styling to match current design

4. Icon Migration:
   - Create a mapping document of all MUI icons to their Lucide equivalents
   - Replace all MUI icon imports with Lucide imports
   - Example: `import DeleteIcon from '@mui/icons-material/Delete'` → `import { Trash2 } from 'lucide-react'`
   - Standardize icon sizing with Tailwind classes (h-4 w-4, h-5 w-5, etc.)

5. Test all migrated components for visual consistency and accessibility
6. Document any component API changes for the team

## 3. Migrate form and input components: TextField, Select, Checkbox, Radio, Switch [pending]
### Dependencies: 13.1, 13.2
### Description: Replace all MUI form components with their SHADCN equivalents, ensuring proper form validation, accessibility, and consistent styling.
### Details:
1. Input and TextField Migration:
   - Add SHADCN Input component: `npx shadcn-ui add input`
   - Replace MUI TextField with SHADCN Input
   - Handle label, helper text, and error states
   - Example: `<TextField label="Name" error={!!error} helperText={error} />` → `<div className="space-y-2"><Label htmlFor="name">Name</Label><Input id="name" className={error ? "border-red-500" : ""} />{error && <p className="text-sm text-red-500">{error}</p>}</div>`

2. Select Component Migration:
   - Add SHADCN Select component: `npx shadcn-ui add select`
   - Replace MUI Select with SHADCN Select
   - Ensure proper handling of options, placeholder text, and multi-select functionality
   - Map MUI Select props to SHADCN Select props

3. Checkbox Migration:
   - Add SHADCN Checkbox component: `npx shadcn-ui add checkbox`
   - Replace MUI Checkbox with SHADCN Checkbox
   - Ensure proper label association and styling
   - Handle indeterminate state if used

4. Radio Group Migration:
   - Add SHADCN RadioGroup component: `npx shadcn-ui add radio-group`
   - Replace MUI Radio and RadioGroup with SHADCN equivalents
   - Ensure proper grouping and label association

5. Switch Migration:
   - Add SHADCN Switch component: `npx shadcn-ui add switch`
   - Replace MUI Switch with SHADCN Switch
   - Ensure proper label association and styling

6. Create form layout utilities with Tailwind to replace MUI FormControl, FormGroup, etc.
7. Test all form components for accessibility (keyboard navigation, screen reader support)
8. Verify form validation works correctly with the new components
9. Document form component usage patterns for the team

## 4. Migrate navigation, feedback, and overlay components: Tabs, Alert, Dialog, Tooltip [pending]
### Dependencies: 13.1, 13.2, 13.3
### Description: Replace MUI navigation, feedback, and overlay components with their SHADCN equivalents, ensuring proper interaction patterns and accessibility.
### Details:
1. Tabs Migration:
   - Add SHADCN Tabs component: `npx shadcn-ui add tabs`
   - Replace MUI Tabs, Tab, TabPanel with SHADCN equivalents
   - Ensure proper tab navigation and content switching
   - Example: Convert MUI `<Tabs><Tab label="Tab 1" /><TabPanel>Content 1</TabPanel></Tabs>` to SHADCN pattern

2. Alert and Toast Migration:
   - Add SHADCN Alert component: `npx shadcn-ui add alert`
   - Add SHADCN Toast component: `npx shadcn-ui add toast`
   - Replace MUI Alert, Snackbar with SHADCN equivalents
   - Ensure proper styling for different severity levels (error, warning, info, success)
   - Implement toast positioning and auto-dismiss functionality

3. Dialog/Modal Migration:
   - Add SHADCN Dialog component: `npx shadcn-ui add dialog`
   - Replace MUI Dialog, DialogTitle, DialogContent, DialogActions with SHADCN equivalents
   - Ensure proper focus management, keyboard navigation, and backdrop handling
   - Example: Convert MUI Dialog pattern to SHADCN `<Dialog><DialogTrigger /><DialogContent><DialogHeader><DialogTitle /></DialogHeader></DialogContent></Dialog>`

4. Tooltip Migration:
   - Add SHADCN Tooltip component: `npx shadcn-ui add tooltip`
   - Replace MUI Tooltip with SHADCN Tooltip
   - Ensure proper positioning, delay behavior, and content rendering

5. Drawer Migration (if used):
   - Add SHADCN Sheet component: `npx shadcn-ui add sheet`
   - Replace MUI Drawer with SHADCN Sheet
   - Configure for different positions (left, right, top, bottom)

6. Test all interactive components for keyboard accessibility and screen reader support
7. Verify that all components maintain proper focus management during interactions
8. Document any changes in component behavior or API for the team

## 5. Migrate data display and layout components: Table, Accordion, Grid, and finalize theme [pending]
### Dependencies: 13.1, 13.2, 13.3, 13.4
### Description: Replace MUI data display and layout components with SHADCN equivalents and Tailwind utilities, then finalize the theme migration and create documentation.
### Details:
1. Table Migration:
   - Add SHADCN Table component: `npx shadcn-ui add table`
   - Replace MUI Table, TableHead, TableBody, TableRow, TableCell with SHADCN equivalents
   - Implement sorting, pagination, and selection functionality if used
   - Ensure proper styling for different table states (hover, selected, etc.)

2. Accordion/Collapse Migration:
   - Add SHADCN Accordion component: `npx shadcn-ui add accordion`
   - Replace MUI Accordion, AccordionSummary, AccordionDetails with SHADCN equivalents
   - Ensure proper expand/collapse behavior and accessibility

3. Layout Migration:
   - Replace MUI Grid, Box, Container with Tailwind flex/grid utilities
   - Create reusable layout components if needed (Container, Section, etc.)
   - Example: `<Grid container spacing={2}>` → `<div className="grid grid-cols-1 md:grid-cols-2 gap-4">`
   - Implement responsive layouts using Tailwind breakpoints

4. Progress Component Migration:
   - Add SHADCN Progress component: `npx shadcn-ui add progress`
   - Replace MUI LinearProgress, CircularProgress with SHADCN equivalents
   - Ensure proper styling and animation

5. Final Theme Refinement:
   - Review and finalize all color tokens in tailwind.config.js
   - Ensure consistent spacing, typography, and border radius throughout the application
   - Implement dark mode support if required
   - Create any missing utility classes for consistent styling

6. Comprehensive Testing:
   - Perform visual regression testing across all components
   - Test responsive behavior across different screen sizes
   - Verify accessibility compliance with WCAG standards
   - Test performance impact of the migration

7. Documentation:
   - Create a comprehensive component migration reference guide
   - Document new styling patterns and best practices
   - Update any existing documentation to reflect the new component library
   - Create examples of common component usage patterns

8. Remove any remaining MUI dependencies and clean up unused code

